<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright Â© 2011 Sattvik Software & Technology Resources, Ltd. Co.
  All rights reserved.

  This program and the accompanying materials are made available under the
  terms of the Eclipse Public License v1.0 which accompanies this distribution,
  and is available at <http://www.eclipse.org/legal/epl-v10.html>.

  By using this software in any fashion, you are agreeing to be bound by the
  terms of this license.  You must not remove this notice, or any other, from
-->

<project name="android-clojure-support" basedir=".">
    <dirname property="android-clojure-support.dir" file="${ant.file.android-clojure-support}"/>

    <property file="${android-clojure-support.dir}/clojure.properties"/>

    <!-- Modified input directories -->
    <property name="source.dir" value="src/java" />
    <property name="clojure.source.dir" value="src/clojure" />
    <property name="clojure.source.absolute.dir" location="${clojure.source.dir}" />

    <!-- Clojure output directories -->
    <property name="out.dir" value="bin"/>
    <property name="clojure.out.dir" value="${out.dir}" />
    <property name="clojure.out.absolute.dir" location="${clojure.out.dir}" />
    <property name="clojure.out.classes.dir" value="${clojure.out.absolute.dir}/classes" />
    <property name="clojure.out.classes.absolute.dir" location="${clojure.out.classes.dir}" />

    <!-- Ensure that the Java source directory exists since Git does not
         preserve empty directories -->
    <target name="-pre-build">
        <mkdir dir="${source.absolute.dir}"/>
        <mkdir dir="${clojure.out.classes.absolute.dir}"/>
    </target>

    <!-- Compiles this project's .java files into .class files. -->
    <target name="-compile" depends="-build-setup, -pre-build, -code-gen, -pre-compile">
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
            <!-- If android rules are used for a test project, its classpath should include
                 tested project's location -->
            <condition property="extensible.classpath"
                    value="${tested.project.absolute.dir}/bin/classes"
                    else=".">
                <isset property="tested.project.absolute.dir" />
            </condition>
            <condition property="extensible.libs.classpath"
                    value="${tested.project.absolute.dir}/${jar.libs.dir}"
                    else="${jar.libs.dir}">
                <isset property="tested.project.absolute.dir" />
            </condition>
            <condition property="clojure.warn.reflection.env"
                    value="${clojure.warn.reflection}"
                    else="false">
                <isset property="clojure.warn.reflection"/>
            </condition>
            <javac encoding="${java.encoding}"
                    source="${java.source}" target="${java.target}"
                    debug="true" extdirs="" includeantruntime="false"
                    destdir="${out.classes.absolute.dir}"
                    verbose="${verbose}"
                    classpath="${extensible.classpath}"
                    fork="${need.javac.fork}"
                    bootclasspathref="project.target.class.path"
                    classpathref="project.all.jars.path">
                <src path="${source.absolute.dir}" />
                <src path="${gen.absolute.dir}" />
                <classpath>
                    <fileset dir="${extensible.libs.classpath}" includes="*.jar" />
                </classpath>
                <compilerarg line="${java.compilerargs}" />
            </javac>
            <java classname="clojure.main"
                    classpath="${clojure.jar}"
                    classpathref="project.target.class.path"
                    fork="true"
                    failonerror="true">
                <sysproperty key="clojure.compile.path" value="${clojure.out.classes.absolute.dir}"/>
                <sysproperty key="clojure.warn.reflection" value="${clojure.warn.reflection.env}"/>
                <classpath>
                    <pathelement path="${extensible.classpath}"/>
                    <pathelement path="${clojure.source.absolute.dir}"/>
                    <path refid="project.all.jars.path"/>
                    <fileset dir="${extensible.libs.classpath}" includes="*.jar" />
                    <pathelement path="${clojure.out.classes.absolute.dir}"/>
                </classpath>
                <arg file="${android-clojure-support.dir}/clojure-compile.clj"/>
                <arg path="${clojure.source.absolute.dir}"/>
            </java>
            <!-- if the project is a library then we generate a jar file -->
            <if condition="${project.is.library}">
                <then>
                    <echo>Creating library output jar file...</echo>
                    <property name="out.library.jar.file" location="${out.absolute.dir}/classes.jar" />
                    <if>
                        <condition>
                            <length string="${android.package.excludes}" trim="true" when="greater" length="0" />
                        </condition>
                        <then>
                            <echo>Custom jar packaging exclusion: ${android.package.excludes}</echo>
                        </then>
                    </if>

                    <propertybyreplace name="manifest.package.path" input="${manifest.package}" replace="." with="/" />

                    <jar destfile="${out.library.jar.file}">
                        <fileset dir="${out.classes.absolute.dir}"
                                includes="**/*.class"
                                excludes="${manifest.package.path}/R.class ${manifest.package.path}/R$*.class ${manifest.package.path}/Manifest.class ${manifest.package.path}/Manifest$*.class ${manifest.package.path}/BuildConfig.class"/>
                        <fileset dir="${source.absolute.dir}" excludes="**/*.java ${android.package.excludes}" />
                    </jar>
                </then>
            </if>

            <!-- if the project is instrumented, intrument the classes -->
            <if condition="${build.is.instrumented}">
                <then>
                    <echo>Instrumenting classes from ${out.absolute.dir}/classes...</echo>
                    <!-- It only instruments class files, not any external libs -->
                    <emma enabled="true">
                        <instr verbosity="${verbosity}"
                               mode="overwrite"
                               instrpath="${out.absolute.dir}/classes"
                               outdir="${out.absolute.dir}/classes">
                            <filter excludes="${manifest.package}.R,${manifest.package}.R$$*,${manifest.package}.BuildConfig" />
                            <filter value="${emma.filter}" />
                        </instr>
                    </emma>
                </then>
            </if>
        </do-only-if-manifest-hasCode>
    </target>
</project>

<!-- vim:set ts=4 sw=4 et: -->
